import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';
import { Report, EggProductionReport, FinancialReport } from '@/types';

// Extend the jsPDF type to include the lastAutoTable property
declare module 'jspdf' {
  interface jsPDF {
    lastAutoTable?: {
      finalY?: number;
    };
  }
}

// PDF Theme colors
const pdfTheme = {
  primary: '#589636', // Farm green
  secondary: '#9C7B54', // Farm brown
  accent: '#F9CA54', // Farm straw
  background: '#FFF8E1', // Light egg color
  text: '#6A543A', // Dark brown
  lightText: '#9C7B54', // Medium brown
  headerBackground: '#E7F0D9', // Light green
  tableHeader: '#EFF7E9', // Very light green
  tableStripe: '#FFF8E1', // Very light egg color
  border: '#C8B091', // Light brown
};

export const generatePDF = (report: Report): Blob => {
  const doc = new jsPDF();
  
  // Add background color to the entire page
  doc.setFillColor(pdfTheme.background);
  doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
  
  // Add decorative header bar
  doc.setFillColor(pdfTheme.primary);
  doc.rect(0, 0, doc.internal.pageSize.width, 12, 'F');
  
  // Add farm name/logo
  doc.setFontSize(18);
  doc.setTextColor(255, 255, 255); // White text
  doc.text("Cluck & Track", 14, 8);
  
  // Set page decoration
  addPageBorder(doc, pdfTheme.border);
  
  // Add title with styling
  doc.setFillColor(pdfTheme.headerBackground);
  doc.roundedRect(10, 16, doc.internal.pageSize.width - 20, 20, 3, 3, 'F');
  
  doc.setTextColor(pdfTheme.text);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.text(report.title, doc.internal.pageSize.width / 2, 30, { align: 'center' });
  
  // Add date generated with styling
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(pdfTheme.lightText);
  doc.text(`Generated on: ${format(new Date(report.createdAt), 'MMM d, yyyy h:mm a')}`, 
    doc.internal.pageSize.width / 2, 40, { align: 'center' });
  
  // Add content based on report type
  const startY = 50;
  
  switch(report.type) {
    case 'egg-production':
      generateEggProductionPDF(doc, report.data as EggProductionReport, startY, pdfTheme);
      break;
    case 'finances':
      generateFinancialPDF(doc, report.data as FinancialReport, startY, pdfTheme);
      break;
    default:
      doc.setFontSize(12);
      doc.text('Report data not available in PDF format', 14, startY);
  }
  
  // Add footer
  addPageFooter(doc, pdfTheme);
  
  // Return the PDF as a blob
  return doc.output('blob');
};

// Helper function to add a decorative border around the page
const addPageBorder = (doc: jsPDF, borderColor: string) => {
  const margin = 5;
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  
  doc.setDrawColor(borderColor);
  doc.setLineWidth(0.5);
  doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
};

// Helper function to add footer to every page
const addPageFooter = (doc: jsPDF, theme: typeof pdfTheme) => {
  const pageHeight = doc.internal.pageSize.height;
  const pageWidth = doc.internal.pageSize.width;
  
  // Add footer line
  doc.setDrawColor(theme.border);
  doc.setLineWidth(0.5);
  doc.line(10, pageHeight - 15, pageWidth - 10, pageHeight - 15);
  
  // Add footer text
  doc.setFontSize(8);
  doc.setTextColor(theme.lightText);
  doc.text("Generated by Cluck & Track Farm Management System", pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  // Add page number
  const pageNumber = (doc as any).internal.getNumberOfPages();
  doc.text(`Page ${pageNumber}`, pageWidth - 15, pageHeight - 10);
};

// Helper to add styled section headers
const addSectionHeader = (doc: jsPDF, text: string, y: number, theme: typeof pdfTheme) => {
  doc.setFillColor(theme.secondary);
  doc.roundedRect(10, y - 6, doc.internal.pageSize.width - 20, 10, 2, 2, 'F');
  
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.setTextColor(255, 255, 255); // White text
  doc.text(text, 14, y);
  
  return y + 15; // Return the new Y position after the header
};

const generateEggProductionPDF = (doc: jsPDF, data: EggProductionReport, startY: number, theme: typeof pdfTheme) => {
  // Summary section with styled box
  let yPos = addSectionHeader(doc, 'Production Summary', startY, theme);
  
  // Summary box with light background
  doc.setFillColor(theme.tableHeader);
  doc.roundedRect(20, yPos - 5, doc.internal.pageSize.width - 40, 40, 3, 3, 'F');
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);
  doc.setTextColor(theme.text);
  
  // Add summary data with labels and values
  const summaryData = [
    ['Total Eggs Produced:', `${data.totalEggs}`],
    ['Daily Average:', `${data.dailyAverage.toFixed(2)}`],
    ['Damaged Eggs:', `${data.damagedCount} (${data.damagedPercentage.toFixed(1)}%)`]
  ];
  
  summaryData.forEach((row, index) => {
    const y = yPos + (index * 10);
    doc.setFont('helvetica', 'bold');
    doc.text(row[0], 30, y);
    doc.setFont('helvetica', 'normal');
    doc.text(row[1], 120, y);
  });
  
  yPos += 45;
  
  // Daily data table with styled header
  if (data.byDate && data.byDate.length > 0) {
    yPos = addSectionHeader(doc, 'Daily Production', yPos, theme);
    
    const tableData = data.byDate.map(day => [
      format(new Date(day.date), 'MMM d, yyyy'),
      day.total.toString(),
      (day.damaged || 0).toString()
    ]);
    
    autoTable(doc, {
      startY: yPos,
      head: [['Date', 'Total Eggs', 'Damaged']],
      body: tableData,
      theme: 'grid',
      headStyles: {
        fillColor: theme.primary,
        textColor: '#FFFFFF',
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: theme.tableStripe
      },
      styles: {
        textColor: theme.text,
        lineWidth: 0.1,
        lineColor: theme.border
      }
    });
  }
};

const generateFinancialPDF = (doc: jsPDF, data: FinancialReport, startY: number, theme: typeof pdfTheme) => {
  // Financial summary section with styled header
  let yPos = addSectionHeader(doc, 'Financial Summary', startY, theme);
  
  // Summary box with light background
  doc.setFillColor(theme.tableHeader);
  doc.roundedRect(20, yPos - 5, doc.internal.pageSize.width - 40, 40, 3, 3, 'F');
  
  // Add financial summary with colored amounts based on positive/negative values
  const summaryItems = [
    { label: 'Total Revenue:', value: data.totalRevenue, positive: true },
    { label: 'Total Expenses:', value: data.totalExpenses, positive: false },
    { label: 'Net Profit:', value: data.netProfit, positive: data.netProfit >= 0 }
  ];
  
  summaryItems.forEach((item, index) => {
    const y = yPos + (index * 10);
    
    // Label
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(theme.text);
    doc.text(item.label, 30, y);
    
    // Value with color based on positive/negative
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(item.positive ? '#109618' : '#DC3912'); // Green for positive, red for negative
    doc.text(`$${Number(item.value).toFixed(2)}`, 120, y);
  });
  
  yPos += 45;
  
  // Expense Categories section
  if (Object.keys(data.expensesByCategory).length > 0) {
    yPos = addSectionHeader(doc, 'Expenses by Category', yPos, theme);
    
    const expenseTableData = Object.entries(data.expensesByCategory).map(([category, amount]) => [
      category,
      `$${Number(amount).toFixed(2)}`
    ]);
    
    autoTable(doc, {
      startY: yPos,
      head: [['Category', 'Amount']],
      body: expenseTableData,
      theme: 'grid',
      headStyles: {
        fillColor: theme.primary,
        textColor: '#FFFFFF',
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: theme.tableStripe
      },
      styles: {
        textColor: theme.text,
        lineWidth: 0.1,
        lineColor: theme.border
      }
    });
  }
  
  // Revenue Categories section
  if (Object.keys(data.revenuesByCategory).length > 0) {
    // Calculate position for the revenue table based on where the expense table ended
    let revenueY = yPos;
    if (Object.keys(data.expensesByCategory).length > 0) {
      revenueY = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 15 : yPos + 60;
    }
    
    // Check if we need a new page
    if (revenueY > 220) {
      doc.addPage();
      // Add background to new page
      doc.setFillColor(theme.background);
      doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
      // Add border to new page
      addPageBorder(doc, theme.border);
      // Add header to new page
      doc.setFillColor(theme.primary);
      doc.rect(0, 0, doc.internal.pageSize.width, 12, 'F');
      doc.setFontSize(18);
      doc.setTextColor(255, 255, 255);
      doc.text("Cluck & Track", 14, 8);
      // Reset Y position for new page
      revenueY = 25;
    }
    
    revenueY = addSectionHeader(doc, 'Revenue by Category', revenueY, theme);
    
    const revenueTableData = Object.entries(data.revenuesByCategory).map(([category, amount]) => [
      category,
      `$${Number(amount).toFixed(2)}`
    ]);
    
    autoTable(doc, {
      startY: revenueY,
      head: [['Category', 'Amount']],
      body: revenueTableData,
      theme: 'grid',
      headStyles: {
        fillColor: theme.primary,
        textColor: '#FFFFFF',
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: theme.tableStripe
      },
      styles: {
        textColor: theme.text,
        lineWidth: 0.1,
        lineColor: theme.border
      }
    });
  }
  
  // Expense Transactions section
  if (data.expenses.length > 0) {
    // Calculate position for the transactions table
    let expY = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 15 : yPos + 100;
    
    // Add a new page if we're too far down
    if (expY > 220) {
      doc.addPage();
      // Add background to new page
      doc.setFillColor(theme.background);
      doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
      // Add border to new page
      addPageBorder(doc, theme.border);
      // Add header to new page
      doc.setFillColor(theme.primary);
      doc.rect(0, 0, doc.internal.pageSize.width, 12, 'F');
      doc.setFontSize(18);
      doc.setTextColor(255, 255, 255);
      doc.text("Cluck & Track", 14, 8);
      // Reset Y position for new page
      expY = 25;
    }
    
    expY = addSectionHeader(doc, 'Expense Transactions', expY, theme);
    
    const expenseData = data.expenses.map(exp => [
      format(new Date(exp.date), 'MMM d, yyyy'),
      exp.category,
      exp.description,
      `$${exp.amount.toFixed(2)}`
    ]);
    
    autoTable(doc, {
      startY: expY,
      head: [['Date', 'Category', 'Description', 'Amount']],
      body: expenseData,
      theme: 'grid',
      headStyles: {
        fillColor: theme.primary,
        textColor: '#FFFFFF',
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: theme.tableStripe
      },
      styles: {
        textColor: theme.text,
        lineWidth: 0.1,
        lineColor: theme.border
      }
    });
  }
  
  // Revenue Transactions section
  if (data.revenues.length > 0) {
    // Calculate position for the revenues table
    let revY = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 15 : yPos + 150;
    
    // Add a new page if we're too far down
    if (revY > 220) {
      doc.addPage();
      // Add background to new page
      doc.setFillColor(theme.background);
      doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
      // Add border to new page
      addPageBorder(doc, theme.border);
      // Add header to new page
      doc.setFillColor(theme.primary);
      doc.rect(0, 0, doc.internal.pageSize.width, 12, 'F');
      doc.setFontSize(18);
      doc.setTextColor(255, 255, 255);
      doc.text("Cluck & Track", 14, 8);
      // Reset Y position for new page
      revY = 25;
    }
    
    revY = addSectionHeader(doc, 'Revenue Transactions', revY, theme);
    
    const revenueData = data.revenues.map(rev => [
      format(new Date(rev.date), 'MMM d, yyyy'),
      rev.category,
      rev.description,
      `$${rev.amount.toFixed(2)}`
    ]);
    
    autoTable(doc, {
      startY: revY,
      head: [['Date', 'Category', 'Description', 'Amount']],
      body: revenueData,
      theme: 'grid',
      headStyles: {
        fillColor: theme.primary,
        textColor: '#FFFFFF',
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: theme.tableStripe
      },
      styles: {
        textColor: theme.text,
        lineWidth: 0.1,
        lineColor: theme.border
      }
    });
  }
  
  // Add footer to every page
  for (let i = 1; i <= (doc as any).internal.getNumberOfPages(); i++) {
    doc.setPage(i);
    addPageFooter(doc, theme);
  }
};
